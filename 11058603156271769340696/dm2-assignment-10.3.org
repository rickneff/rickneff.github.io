#+TITLE: STU Trees II
#+LANGUAGE: en
#+OPTIONS: H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t
#+OPTIONS: html-postamble:nil
#+STARTUP: showeverything entitiespretty
#+SETUPFILE: theme-bigblow.setup
 
[[elisp:(find-file-other-window%20"generic-instructions.org")][Read Instructions]]
[[elisp:(progn%20(save-buffer)%20(browse-url-of-file%20(org-html-export-to-html)))][Export to HTML and Browse]]
[[elisp:(progn%20(save-buffer)%20(org-clock-report%201)%20(save-buffer))][Insert/Update Clock Summary Report]]

* TODO Solve the Huffman Tree Problem Again
  With some added constraints, namely, to use the following
  code that has a couple of stub functions for you to flesh out
  (one of which needs a helper function that you will provide).
#+name: bulk-of-code
#+BEGIN_SRC elisp :results silent
  (require 'cl)

  (require 'first-ten-million-primes)

  (defun list-the-gaps ()
    "Create a list of the gaps between the first ten million primes.
     Depends on the first-ten-million-primes vector."
    (loop with curr = 0
          with prev = 3
          with gap = 0
          for i from 2 upto (1- (length first-ten-million-primes))
          do (setq curr (elt first-ten-million-primes i)
                   gap (- curr prev)
                   prev curr)
          collect gap))

  (defun restore-primes (list-of-gaps)
    "Given the list of gaps starting at the gap between 3 and 5
       return a list of the first ten million primes."
    (cons 2 (cons 3 (loop for gap in list-of-gaps with prime = 3
                          collect (incf prime gap)))))

  (defun make-node (gap-size frequency)
    (let ((symbol (make-symbol (concat "gn" (number-to-string node-counter)))))
      (incf node-counter)
      (set symbol frequency)
      (when gap-size
        (put symbol :gap gap-size))
      symbol))

  (defun make-frequency-table (gap-list)
    (let ((freq-table (make-hash-table)))
      (loop for gap in gap-list
            do (incf (gethash gap freq-table 0)))
      freq-table))

  (defun make-node-list-from-table (frequency-table)
    (let ((node-list nil))
      (maphash (lambda (key val) (push (make-node key val) node-list))
               frequency-table)
      node-list))

  (defun compare-nodes (node1 node2)
    (<= (get-value node1) (get-value node2)))

  (defun get-value (node)
    (and (symbolp node) (symbol-value node)))

  (defun set-value (node new-value)
    (and (symbolp node) (set node new-value)))

  (defun get-parent (node)
    (and (symbolp node) (get node :parent)))

  (defun set-parent (node parent)
    (and (symbolp node) (symbolp parent) (put node :parent parent)))

  (defun get-left (node)
    (and (symbolp node) (get node :left)))

  (defun set-left (node left)
    (and (symbolp node) (symbolp left) (put node :left left) (put left :is-left t)))

  (defun get-right (node)
    (and (symbolp node) (get node :right)))

  (defun set-right (node right)
    (and (symbolp node) (symbolp right) (put node :right right)))

  (defun number-of-digits (n)
    (1+ (floor (log n 10))))

  (defun compression-ratio (f v)
    (* 100 (/ (- f v) (float f))))

  (defun make-internal-node (left-subtree right-subtree)
    (let* ((new-node (make-node nil ; nil means no gap (none needed)
                                (+ (symbol-value left-subtree)
                                   (symbol-value right-subtree)))))
       (set-parent left-subtree new-node)
       (set-parent right-subtree new-node)
       (set-left new-node left-subtree)
       (set-right new-node right-subtree)
       new-node))

  (defun insert-sort (node node-list)
    ;; TODO flesh this out so make-huffman-tree will work
    )

  (defun make-huffman-tree (Q)
    (let (Tl Tr)
      (while (> (length Q) 1)
        (setq Tl (first Q)
              Q (rest Q)
              Tr (first Q)
              Q (rest Q)
              Q (insert-sort (make-internal-node Tl Tr) Q)))
      (first Q)))

  (defun get-ancestry (node)
    (if (null (get-parent node))
        nil
      (cons node (get-ancestry (get-parent node)))))

  (defun put-code (leaf-node)
    (put leaf-node :code
         (apply 'string
                (loop for node in (nreverse (get-ancestry leaf-node))
                      collect (if (get node :is-left) ?0 ?1)))))

  (defun make-code-list (node-list)
    (cl-sort (mapcar
              (lambda (node)
                (cons (get node :gap) (put-code node)))
              list-of-nodes)
             '< :key 'car))

  (defun get-code-from-gap (gap code-list)
    (cdr (assoc gap code-list)))

  (defun get-code (node code-list)
    (get-code-from-gap (get node :gap)))

  (defun show-node (node)
    (princ (format
            "%s\n"
            (cons node (cons (symbol-value node) (symbol-plist node))))))

  (defun show-tree (root)
    (show-node root)
    (when (get-left root)
       (show-tree (get-left root)))
    (when (get-right root)
       (show-tree (get-right root))))
#+END_SRC

  Compression Ratio Calculations (need code-list and table-of-frequencies):
#+BEGIN_SRC elisp
  (require 'first-ten-million-primes)

  (setq num-keys (length code-list)
        num-bits-per-key-with-fixed-encoding (ceiling (log num-keys 2))
        total-bits-encoded-with-huffman-encoding 0
        total-bits-encoded-with-fixed-encoding 0
        ignore (maphash (lambda (gap freq)
                          (incf total-bits-encoded-with-huffman-encoding
                                (* freq (length (get-code-from-gap gap code-list))))
                          (incf total-bits-encoded-with-fixed-encoding
                                (* freq num-bits-per-key-with-fixed-encoding)))
                        table-of-frequencies)
        compression-ratio-from-fixed
        (compression-ratio total-bits-encoded-with-fixed-encoding
                           total-bits-encoded-with-huffman-encoding)
        size-of-first-ten-million-primes-at-thirty-two-bits-per-prime
        (* 32 10000000)
        compression-ratio-from-binary
        (compression-ratio size-of-first-ten-million-primes-at-thirty-two-bits-per-prime
                           total-bits-encoded-with-huffman-encoding)
        size-ascii-in-bytes
        (loop for prime across first-ten-million-primes
              sum (1+ (number-of-digits prime)))
        size-ascii-in-bits
        (* size-ascii-in-bytes 8)
        compression-ratio-from-ascii
        (compression-ratio size-ascii-in-bits
                           total-bits-encoded-with-huffman-encoding)
        results
        (list (list 'compression-ratio-from-fixed (format "%2.15f" compression-ratio-from-fixed))
              (list 'compression-ratio-from-binary (format "%2.2f" compression-ratio-from-binary))
              (list 'compression-ratio-from-ascii  (format "%2.2f" compression-ratio-from-ascii))))
#+END_SRC

#+BEGIN_SRC elisp :results silent :noweb eval
  <<bulk-of-code>>

  (defun encode-gaps (code-list list-of-gaps)
    (mapconcat (lambda (gap) (cdr (assoc gap code-list))) list-of-gaps ""))

  (defun decode-gaps (encoded tree)
    ;; TODO flesh this out so encode-first-ten-million-primes will work
    )

  (defun encode-first-ten-million-primes ()
     (let* ((list-of-gaps (list-the-gaps))
            (table-of-frequencies (make-frequency-table list-of-gaps))
            (node-counter 0)
            (list-of-nodes (sort (make-node-list-from-table table-of-frequencies)
                                 'compare-nodes))
            (tree (make-huffman-tree (copy-sequence list-of-nodes)))
            (code-list (make-code-list list-of-nodes))
            (encoded (encode-gaps code-list list-of-gaps))
            (decoded (decode-gaps encoded tree)))
       (list list-of-gaps encoded decoded)))

  (defun test-encode-decode-first-ten-million-primes ()
    (destructuring-bind (list-of-gaps encoded decoded)
        (encode-first-ten-million-primes)
      (equal list-of-gaps decoded)))
#+END_SRC

#+BEGIN_SRC elisp :results raw
  (let* ((start (float-time))
         (results (test-encode-decode-first-ten-million-primes)))
    (list results (- (float-time) start)))  
#+END_SRC

* 722
   LTT = Learn To Teach
   LWT = Learn While Teaching
   STW = Spread The Word
   STW = Strengthen The Weak

   | car         | cdr         | DM1 Student(s) you will mentor    | Email ID 1 | Email ID 2 |
   |-------------+-------------+-----------------------------------+------------+------------|
   | Zach        | Andrew      | Alex Wildblood                    | wil16197   |            |
   | Luke        | Jonathan S. | Dallin Cawley + Jonah White       | caw15001   | whi17069   |
   | Ashley      | Ronald      | Benjamin Bishop + Joaquin Paredes | bis11012   | par17035   |
   | Sam         | Greg        | Mark Craig + Teddy Gehoski        | cra12019   | geh12002   |
   | Paul        | Kathryn     | Bradley Dawson + Jake Schwantes   | daw15003   | sch15036   |
   | Justin B.   | Taylor M.   | Shawn Lilly + Samuel Warr         | lil16001   | war13009   |
   | Grayson     | Cameron     | Scott Pierce + Adam White         | pie15003   | whi15011   |
   | Jon         | Curtis      | Durid Ahmad + David Gurr          | ahm16002   | gur12001   |
   | Jonathan D. | Taylor I.   | Kwok Moon (Wilson) Ho             | ho17003    |            |
   | Sean        | Joshua B.   | Christopher Van Kammen            | van15039   |            |
   | Joshua M.   | Will        | Justin Jenkins                    | jen17046   |            |
   | Justin C.   | Brenden     | Travis Jones                      | jon17064   |            |
   | Ryan        | Tyler       | Zachary Klingler                  | kli17001   |            |
   | Chase       | Michael     | Steven Smith                      | smi13056   |            |
   | Mikah       | Ty          | Rochak Kunwar                     | kun16009   |            |
   | Matt        | Dylan       | Cameron Chappell                  | cha13018   |            |
   | Anthony     | Benj        | Joseph Olsen                      | ols17018   |            |
   | Preston     | Madison     | Michael McCarty                   | mcc13021   |            |

* TODO What Is True?
   This is a tool that allows you to assess yourself on how you did
   with this assignment. Check a box (using , ,) if warranted.

   What is true of our experience in general?
#+name: assertions-in-general
  - [ ] We had fun. 
  - [ ] We learned something new.
  - [ ] We achieved something meaningful, or something we can build upon at a
    later time.

   What is true of our collaboration?
#+name: assertions-about-collaboration
  - [ ] We achieved a balanced distribution of labor. 
  - [ ] We taught and learned from each other. 
  - [ ] We taught a DM1 student or two about Huffman trees. 
  - [ ] We taught said student(s) about Huffman encoding and decoding. 
  - [ ] We provided some assistance with their GPAOs.

    What is true of our report on what we learned?
#+name: assertions-about-report
  - [ ] We wrote a sufficient number of well-written sentences.
  - [ ] We reported on any connections we found between these problems and
    something we already knew.
  - [ ] We reported on the results of our DM1 student mentoring.

   What is true of the \ldquo{}mechanical infelicities\rdquo (misspelled words, grammatical
   errors, punctuation errors) in our report of what we learned?
#+name: assertions-about-MIs
  - [ ] There are fewer than four.
  - [ ] There are fewer than three.
  - [ ] There are fewer than two.
  - [ ] There are none.

   What is true about our answers?
#+name: assertions-about-answers
  - [ ] We wrote a correct elisp function to =insert-sort= the tree nodes into the queue. 
  - [ ] We wrote a correct =decode-gaps= function to restore the list of gaps from its encoded string. 
  - [ ] We wrote a correct =find-leaf= helper function for =decode-gaps= to call. 
  - [ ] We explored the =timp= multithreading package and got it to work for this problem.
  - [ ] We calculated the speedup obtained by creating several threads to do this work.

#+BEGIN_SRC elisp
; (org-sbe "time-for-fun.org:calculate-score")

  (calculate-score
   (quote
    ((in-general 2 2 2)
     (about-collaboration 8 8 8 9 9)
     (about-report 6 6 6)
     (about-MIs 1 1 1 1)
     (about-answers 6 6 6 6 6))))
#+END_SRC
