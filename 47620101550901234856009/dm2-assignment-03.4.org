#+TITLE: DM2 Assignment 03.4
#+LANGUAGE: en
#+OPTIONS: H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t
#+OPTIONS: html-postamble:nil
#+STARTUP: showeverything entitiespretty
#+SETUPFILE: theme-bigblow.setup

[[elisp:(relocate-file-to-work-folder)][Relocate File to Work Folder]]
[[elisp:(browse-url-of-file%20(org-html-export-to-html))][Export to HTML and Browse]]
[[elisp:(org-clock-report%201)][Insert/Update Clock Summary Report]]
* TODO Study this Function and its Partial Implementation in C++
#+BEGIN_EXAMPLE
   The function f : Z+  x  Z+ --> Z+, where f(m, n) = [(m + n - 2)(m + n - 1)/2] + m,
   is one-to-one and onto.

   A little experimentation with this function shows the pattern.

   f(1,1) =  1   f(2,1) =  3   f(3,1) =  6   f(4,1) = 10   f(5,1) = 15

   f(1,2) =  2   f(2,2) =  5   f(3,2) =  9   f(4,2) = 14   f(5,2) = 20

   f(1,3) =  4   f(2,3) =  8   f(3,3) = 13   f(4,3) = 19   f(5,3) = 26

   f(1,4) =  7   f(2,4) = 12   f(3,4) = 18   f(4,4) = 25

   f(1,5) = 11   f(2,5) = 17   f(3,5) = 24

   f(1,6) = 16   f(2,6) = 23

   f(1,7) = 22

   It should be clear that the range of values this function takes on
   for a fixed value of m + n, say m + n = x, is

   (x - 2)(x - 1)                (x - 2)(x - 1)
   --------------  + 1  through  -------------- + (x - 1)
          2                             2

   since m can assume the values 1, 2, 3,...,(x - 1) under these
   conditions, and the first term in the formula is a fixed positive
   integer when m + n is fixed.

   To show that this function is one-to-one and onto, we merely need
   to show that the range of values for x + 1 picks up precisely
   where the range of values for x left off, i.e., that

   f(x - 1, 1) + 1 = f(1, x)

                     (x - 2)(x - 1)
   f(x - 1, 1) + 1 = -------------- + (x - 1) + 1
                            2

                     x^2 - x + 2    (x - 1)x
                   = -----------  = --------  + 1  = f(1, x)
                         2             2
#+END_EXAMPLE

#+BEGIN_SRC C++ :results output :var global_y=23
  #include <cmath>
  #include <cstdlib>
  #include <iostream>
  using namespace std;

  int f(int m, int n)
  {
     int x = m + n;
     return (((x - 2) * (x - 1) / 2) + m);
  }

  void invert(int y, int& m, int& n)
  {
     int x = 0; // what should this assignment to x really be? 
     m = y - ((x-1)*(x-2)/2);
     n = x - m;
  }

  int main(int argc, char* argv[])
  {
     int y = (argc > 1) ? atoi(argv[1]) : global_y;

     int m = 0;
     int n = 0;
     invert(y, m, n);
     // check answer
     if (y == f(m, n))
     {
     cout << "m = " << m << ", n = " << n << endl;
     }
     return 0;
  }
#+END_SRC

  If correctly implemented, the output will be:
#+RESULTS:
: m = 2, n = 6

* TODO Probe Deeply Into A Number-Theoretic Conjecture
  Let us define two infinite sets of positive integers, /A/ and /B/, to be
  generated based on two real numbers. The first is \( x = \sqrt{2} \), so \( A
  = \{\lfloor x \rfloor, \lfloor 2x \rfloor, \lfloor 3x \rfloor, \lfloor 4x
  \rfloor, \ldots \} \), more succinctly written as \( \{\lfloor nx \rfloor : n
  \in \mathbf{Z^{+}}\} \). /B/ is similarly defined, except with \( 2 + \sqrt{2}
  \) being the real number /x/. So in words, /A/ is the set of all floored
  positive integer multiples of the square root of two. /B/ is the set of all
  floored positive integer multiples of two plus the square root of two.

  You must grasp the meaning of this definition and demonstrate that you have
  achieved a solid understanding of it. To help achieve and explore that
  understanding, write an elisp program to calculate the two sets /A/ and /B/.
  As you examine your results, be on the lookout for any patterns, and formulate
  some kind of conjecture about these results. State your conjecture clearly and
  unambiguously, then try to /verify/ your conjecture for as many positive
  integers as you can.

  In the supplied sample code is an elisp program (=3x+1conjecture.el=) that
  verifies the so-called /3x + 1 conjecture/ for a given positive integer. When
  you examine this code, note the use of the calc package and how it enables
  working with /very large/ numbers.

** Sample Code

#+BEGIN_SRC elisp :results silent :tangle 3x+1conjecture.el
  (require 'cl)

  (require 'calc)

  (defmath is-odd (num)
    (= (logand num 1) 1))

  (defmath 3x+1 (num)
    (if (is-odd num)
        (1+ (* 3 num))
      (/ num 2)))

  (defmath transform-3x+1 (num)
    (while (> num 1)
      (setq num (3x+1 num)))
    num)

  (defun test-3x+1-conjecture (max-num)
    (loop for n from 2 to max-num
          unless (= 1 (calcFunc-transform-3x+1 n))
          collect n))

  (defmacro measure-time (&rest body)
    "Measure and return the running time of the code in body."
    (declare (indent defun))
    (let ((start (make-symbol "start")))
      `(let ((,start (float-time)))
         ,@body
         (- (float-time) ,start))))

  (defun test-100000()
    (print (vector (measure-time (setq results (test-3x+1-conjecture 100000))) results)))
#+END_SRC

#+BEGIN_SRC elisp
  (require 'calc-math)
  (calcFunc-is-odd (setq bn (math-read-number "3589723987598273598723958729385792875982735982759871")))
#+END_SRC

#+RESULTS:
: t

#+BEGIN_SRC elisp :results code
  bn
#+END_SRC

#+RESULTS:
#+BEGIN_SRC elisp
(bigpos 982759871 875982735 729385792 598723958 987598273 3589723)
#+END_SRC
(lambda (num) (if (calcFunc-is-odd num) (math-add (math-mul 3 num) 1) (math-div num 2)))

#+BEGIN_SRC elisp
  (vector (measure-time (setq results (test-3x+1-conjecture 100000))) results)
#+END_SRC

#+RESULTS:
: [20.126811027526855 nil]

* Expectations
  *How to Earn Your Grade*

  1. Supply the correct missing expression in the assignment of /x/ in the
     /invert/ function.
  2. Get the supplied 3x+1conjecture.el code to “tangle” 
     (see [[http://orgmode.org/guide/Working-With-Source-Code.html]]).
  3. Learn how to run emacs in \ldquo{}batch mode\rdquo. 
  4. Load the supplied code and run it in batch mode.
  5. Report on how long it took to run the =test-3x+1-conjecture= function.
  6. Formulate the set-theoretic conjecture in \ldquo{}set proposition\rdquo form.
     Be sure to state your conjecture *clearly* and *unambiguously* (using
     no more than 20 symbols).
  7. Show that you grasp the meaning of and demonstrate that you have
     achieved a solid understanding of this conjecture.
  8. Using your experience with the /calc-math/ package, write elisp code
     to /verify/ the set-theoretic conjecture. This requires attacking
     the problem using /integers/ --- *not* /reals/.
  9. With a time/computation budget of 24 hours (in a row), report on
     how many 13-digit numbers (in the trillions) you can verify.
  10. Do the \ldquo{}What Is True?\rdquo self-assessment.

* TODO What Is True?
   This is a tool that allows you to assess yourself on how you did
   with this assignment. Check a box (using , ,) if warranted.

   What is true of my experience in general?
#+name: assertions-in-general
  - [ ] I had fun.
  - [ ] I collaborated with one or more classmates.
  - [ ] I learned something new.
  - [ ] I achieved something meaningful, or something I can build upon at a later time.

   What is true of my report on what I learned?
#+name: assertions-about-report
  - [ ] I wrote a sufficient number of well-written sentences.
  - [ ] I reported on how I attacked and solved the problem of the invert
    function.
  - [ ] I reported on how many 13-digit numbers I was able to verify.
  - [ ] I reported what I thought about while doing the problems.
  - [ ] I reported on any connections I found between these problems and
    something I already know.
  - [ ] I reported who were and what contribution each of my collaborators made.

   What is true of the \ldquo{}mechanical infelicities\rdquo (misspelled words, grammatical
   errors, punctuation errors) in my report of what I learned?
#+name: assertions-about-MIs
  - [ ] There are fewer than four.
  - [ ] There are fewer than three.
  - [ ] There are fewer than two.
  - [ ] There are none.

   What is true about the correctness and completeness of my code?
#+name: assertions-about-correctness-and-completeness-of-code
  - [ ] It is verified by showing no output except that which would report a
    failure to satisfy a correct conjecture.
  - [ ] It uses bigpos arithmetic via the 'calc' and 'calc-math' packages.
  - [ ] It does NOT use any floating-point arithmetic.
  - [ ] It can correctly keep running for 24 consecutive hours without running
    out of memory.
  - [ ] It can correctly keep running under emacs in batch mode in the
    background, as discussed in class.

   What is true about the elegance of my code?
#+name: assertions-about-elegance-of-code
  - [ ] It has some by virtue of its correctness, as first and foremost, an
    elegant solution is a correct solution.
  - [ ] It increases by means of helper functions that increase cohesion, and
    decrease complexity.
  - [ ] It increases by having no unnecessary, redundant functionality.
  - [ ] It increases by using data types/structures as efficiently as possible.
  - [ ] My code has only function definitions (defuns) in it, NO function calls
    or other expressions.
  - [ ] The last function in my code is my 'main' test driver function defined
    as discussed in class.

   What is true of the depth of my engagement with this assignment?
#+name: assertions-about-depth-of-engagement
  - [ ] I found and grasped a clear, unambiguous statement of the set-theoretic conjecture.
  - [ ] I succeeded in verifying this conjecture for many, many 13-digit integers.
    
   What is true of the above-and-beyond depth of my engagement with this assignment?
#+name: assertions-about-above-and-beyond-depth-of-engagement
  - [ ] I went deeper by seeking for an approach to a proof, and getting close, but not quite to the end.
  - [ ] I went deeper by getting all the way to the end, and clinching the proof.
  - [ ] I went still deeper by exploring AND reporting on possible applications of the ideas I discovered.

#+BEGIN_SRC elisp
  (org-sbe "time-for-fun.org:calculate-score")
  (calculate-score
   (quote
    ((in-general 1 1 1 1)
     (about-report 2 2 2 2 2 2)
     (about-MIs 2 2 2 2)
     (about-correctness-and-completeness-of-code 6 6 6 6 6)
     (about-elegance-of-code 6 6 6 6 6 6)
     (about-depth-of-engagement 5 5)
     (about-above-and-beyond-depth-of-engagement 2 4 8))))
#+END_SRC
