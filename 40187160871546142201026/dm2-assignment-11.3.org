#+TITLE: VWX Graphs 
#+LANGUAGE: en
#+OPTIONS: H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t
#+OPTIONS: html-postamble:nil
#+STARTUP: showeverything entitiespretty
#+SETUPFILE: theme-bigblow.setup
 
[[elisp:(find-file-other-window%20"generic-instructions.org")][Read Instructions]]
[[elisp:(progn%20(save-buffer)%20(browse-url-of-file%20(org-html-export-to-html)))][Export to HTML and Browse]]
[[elisp:(progn%20(save-buffer)%20(org-clock-report%201)%20(save-buffer))][Insert/Update Clock Summary Report]]
* TODO Implement a Graph Algorithm
  Your assignment this week builds upon Problem ANA in VWS. Refer to that to
  refresh your knowledge of *cliques* and *anti-cliques*. ANA asks you to solve
  the relatively easy problem of *verifying* these graph properties. Now on to
  the harder problem of *finding* the *cliques* and *anti-cliques* in a graph.

  One of several theorems in so-called *Ramsey Theory* states that every graph
  with n nodes contains either a clique or an anti-clique with at least \frac12 log_2 n
  nodes. Here is a high-level algorithm for finding these graph artifacts:

  Create two lists, A and B. Then, starting with the entire graph, repeatedly
  add each remaining node x to A if its degree is greater than one half the
  number of remaining nodes and to B otherwise. Discard all nodes to which x
  *is not* connected if it was added to A. Discard all nodes to which x *is*
  connected if it was added to B. Continue until no nodes are left, whereupon
  the A list contains the nodes of a clique and the B list contains the nodes of
  an anti-clique.

  The fact is, this algorithm works. Every time. A careful mathematical analysis
  shows why this must be so. But /how well/ does it work? Well, it depends!

  It will obviously work better for larger graphs than smaller ones. Why? Simply
  because larger graphs have more opportunities to have cliques and anti-cliques
  than smaller ones. And the more \ldquo{}well-connected\rdquo a graph is, the more chance
  this algorithm has to find \ldquo{}interesting\rdquo examples of these artifacts (meaning
  those having more than 0, 1 or 2 nodes). Yes, the algorithm will often find
  cliques (or anti-cliques) with no nodes, 1 node or 2 nodes, ignoring entirely
  a K_3 or K_4 (if one is to be found). (But finding a K_m clique for m \le n where m
  is as large as possible is the *maximal clique* problem, which this simple
  algorithm does not begin to address.)

  What this algorithm needs is a little disambiguation. What does \ldquo{}repeatedly\rdquo
  mean? What are the steps being repeated? What does it mean to \ldquo{}continue until
  no nodes are left\rdquo? Left in the graph? Left to be considered? In what order
  should the nodes be considered?

  Such are the questions to be addressed in your exploration this week.

  To be discussed in class are various graph representations and
  implementations, but start thinking about how you would organize your elisp
  code. The less-than-explicit nature of your tasks befit the doubled weight for
  this assignment compared to previous ones.

* TODO What Is True?
   This is a tool that allows you to assess yourself (and your collaborators) on
   how you did with this assignment. Check a box (using , ,) if warranted.

   What is true of our experience in general?
#+name: assertions-in-general
  - [X] We had fun. 
  - [X] We learned something new.
  - [X] We achieved something meaningful, or something we can build upon at a
    later time.

   What is true of our collaboration?
#+name: assertions-about-collaboration
  - [ ] We achieved a balanced distribution of labor. 
  - [ ] We taught and learned from one another. 

    What is true of our report on what we learned?
#+name: assertions-about-report
  - [ ] We wrote a sufficient number of well-written sentences.
  - [ ] We reported on any connections we found between these problems and
    something we already knew.
  - [ ] We answered one question mentioned above.
  - [ ] We answered two questions mentioned above.
  - [ ] We answered three questions mentioned above.
  - [ ] We answered four questions mentioned above.
  - [ ] We answered one question *not* mentioned above (of our own devising).
  - [ ] We answered two questions *not* mentioned above (of our own devising).
  - [ ] We answered three questions *not* mentioned above (of our own devising).
  - [ ] We answered four questions *not* mentioned above (of our own devising).

   What is true of the \ldquo{}mechanical infelicities\rdquo (misspelled words, grammatical
   errors, punctuation errors) in our report of what we learned?
#+name: assertions-about-MIs
  - [ ] There are fewer than four.
  - [ ] There are fewer than three.
  - [ ] There are fewer than two.
  - [ ] There are none.

   What is true about our solution?
#+name: assertions-about-answers
  - [ ] We figured out a good way to represent a graph using elisp.
  - [ ] We figured out what it means to randomly generate a graph.
  - [ ] We wrote an elisp function to randomly generate a graph with n nodes.
  - [ ] We used our code and found a clique and an anti-clique in a randomly-generated graph with 10 nodes.
  - [ ] We used our code and found a clique and an anti-clique in a randomly-generated graph with 15 nodes.
  - [ ] We used our code and found a clique and an anti-clique in a randomly-generated graph with 20 nodes.
  - [ ] We used our code and found a *maximal* clique in a randomly-generated graph with 10 nodes.
  - [ ] We used our code and found a *maximal* clique in a randomly-generated graph with 15 nodes.
  - [ ] We used our code and found a *maximal* clique in a randomly-generated graph with 20 nodes.

#+BEGIN_SRC elisp
; (org-sbe "time-for-fun.org:calculate-score")

  (calculate-score
   (quote
    ((in-general 2 2 2)
     (about-collaboration 5 5)
     (about-report 3 3 2 2 2 2 3 3 3 3)
     (about-MIs 1 1 1 1)
     (about-answers 2 3 4 5 6 7 8 9 10))))
#+END_SRC
