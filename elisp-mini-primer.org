#+TITLE: Elisp Mini Primer 
#+LANGUAGE: en
#+OPTIONS: H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t d:(not "HINT")
#+OPTIONS: html-postamble:nil
#+STARTUP: showeverything entitiespretty
#+SETUPFILE: theme-bigblow.setup

:HINT:
 Click your mouse on the links below, or with your cursor somewhere in them,
 press the Enter key.

[[elisp:(relocate-file-to-work-folder)][Relocate File to Work Folder]]

[[elisp:(find-file-other-window%20"generic-instructions.org")][Read Instructions]]

[[elisp:(browse-url-of-file%20(org-html-export-to-html))][Export to HTML and Browse]]

[[elisp:(org-clock-report%201)][Insert/Update Clock Summary Report]]
:END:
* A Learning Tip
  At certain points in this primer you will be asked to \ldquo{}Predict Verify Ponder\rdquo
  (PVP as a TLA). That means to predict what will happen *before* you carry out
  some instruction, then *verify* your prediction, and *ponder* why you were or
  were not surprised by the results.

* Get Introduced to Emacs Lisp
  elisp for short --- a programming language that grows on you. The basics of
  elisp are the same as those of other programming languages:

  - types
  - variables
  - assignments
  - conditionals
  - functions

  This will be a whirlwind tour through these basic constructs. You might be
  interested in comparing this to another introductory tutorial found here:
  [[https://learnxinyminutes.com/docs/elisp/]]

  Another one you might get some traction from is:
  http://steve-yegge.blogspot.com/2008/01/emergency-elisp.html

  Among other things this one will teach you some basics of loops, a topic
  conspicuously absent from the list above.
* Learn About Source Code Blocks
  In org-mode, a source code block is delimited by \ldquo{}begin\rdquo and \ldquo{}end\rdquo source
  markers, with the language of the code that will go in the block identified by
  name, like so:

#+begin_src elisp

#+end_src

  Entering that text manually every time is tedious. Here\rsquo{}s a shortcut: have
  Emacs insert an elisp source code block for you! Try it. Move to the line just
  below these four characters \lsquo{}(\rsquo, \lsquo{}e\rsquo, \lsquo{}l\rsquo, and \lsquo{})\rsquo

(el)

  and type Ctrl-x Ctrl-e (abbreviated C-x C-e). This \ldquo{}key chord\rdquo is bound to the
  built-in function =eval-last-sexp=). Note that invoking this function replaced
  those four characters with the source block with \lsquo{}elisp\rsquo already there.
* Learn a Notational Convention
  You just saw, perhaps for the first time, equals signs surrounding something
  (=eval-last-sexp=). This tells org-mode to render it as monospaced text
  when \ldquo{}exporting\rdquo (more on which later). This form of \ldquo{}bracketing\rdquo is useful
  for identifying names/symbols/things defined in elisp.
* Learn How to Evaluate Atomic elisp Expressions
  In this task you will learn just *one of MANY* ways to evaluate elisp
  expressions. IYI to learn about some other ways, read the article at this
  link: [[https://www.masteringemacs.org/article/evaluating-elisp-emacs]]

  The main elisp type (and how lisp in general got its name --- LISt Processing)
  is a (singly-linked) list. In a stroke of genius, the inventor of lisp, John
  McCarthy, saw that this \ldquo{}molecular\rdquo structure could represent *both* code
  *and* data. The beauty of this ingenious representation is that /data/ can
  represent /code/ *and* vice versa.

  Other data types include these \ldquo{}indivisible atoms\rdquo:

  - numbers
  - strings
  - characters
  - t
  - nil

  All of the above \ldquo{}self-evaluate\rdquo (evaluate to themselves). Try numbers first.
  Numbers are denoted (in one of many \ldquo{}readings\rdquo) as a contiguous string of zero
  or more digits 0-9 followed (optionally) by one period then (optionally) more
  digits.

  See what happens when you evaluate the elisp-source-block-inserter function,
  as you did above, (C-x C-e right under the =(el)=), make sure you are in the
  insert state (vertical bar cursor), and then type the six keys

  1 2 3 ESC , ,

  Go ahead and do that here:
(el)

#+RESULT: (\lsquo{}RESULTS\rsquo minus the \lsquo{}S\rsquo)
: 123

  The above \lsquo{}#+RESULTS:\rsquo{} marker (note plural with an \lsquo{}S\rsquo) followed by the
  results of evaluating 123 is what you should expect. Try it on the next four
  blocks. *RESIST* the urge to just evaluate the block via \ldquo{}comma comma\rdquo (which
  as you\rsquo{}ve seen, is a context-sensitive command). Try to predict what the
  results will be *before* you evaluate the block, which will reveal whether or
  not your prediction was right. This is a specific instance of the generic PVP
  exercise mentioned at the top of this file.

#+begin_src elisp
 3.14159
#+end_src

#+begin_src elisp
  42
#+end_src

#+begin_src elisp
  42.
#+end_src

#+begin_src elisp
  .42
#+end_src

:HINT:
  Evaluating numbers is a pretty benign activity, but that\rsquo{}s not true of
  evaluating some elisp code, which potentially can do bad things. Would it not
  be prudent to have some kind of "are-you-sure" confirmation prompt you have to
  answer first?

  There *is* such a safeguard confirmation prompt, but it has been configured to
  be off by default, as answering the prompt by typing \lsquo{}y\rsquo every time gets
  tedious really fast.

  You can enable this prompt by setting a special controlling flag variable to
  =t= (see below about =t= and =nil=):

  SPC SPC set-variable

  prompts for the variable name (org-confirm-babel-evaluate) and then the value (t).
:END:

  Strings are sequential \ldquo{}strings\rdquo of characters surrounded by double quotes:

#+begin_src elisp
  "Dog bites man --- not news."
#+end_src

#+begin_src elisp
  "Man bites dog --- news!"
#+end_src

  Did you notice the missing quotes in the results? That\rsquo{}s intentional. It\rsquo{}s
  still a string, just displayed without quotes. To preserve them in this
  interaction style requires a little more work, as will be shown below.

  Characters (whose syntax requires a preceding question mark to flag them as
  such) evaluate to a number (their ASCII code equivalent):

#+begin_src elisp
  ?H
#+end_src

#+begin_src elisp
  ?a
#+end_src

#+begin_src elisp
  ?+
#+end_src

  Finally, the special symbols =t= (true) and =nil= (false) self-evaluate:

#+begin_src elisp
  t
#+end_src

#+begin_src elisp
  nil
#+end_src

  Note that nil is not displayed here. Note too that =nil= does double duty. It
  represents the Boolean false *and* the empty list, which is useful in certain
  contexts.
* Learn How to Evaluate Molecular elisp Expressions
  Lisp can have lists (nested to any depth), which are called \ldquo{}forms\rdquo or
  \ldquo{}symbolic expressions\rdquo or \ldquo{}s-expressions\rdquo or \ldquo{}sexps\rdquo. You\rsquo{}ll see a few
  instances of \ldquo{}sexp\rdquo in elisp function names (e.g., =eval-last-sexp=), but as
  that particular abbreviation leaves much to be desired (it\rsquo{}s not easily
  pronounced, for one thing) call them *eles* (EEE-luhs, short for /evaluatable
  lisp expressions/). Every element of a list *except the first* is evaluated
  before the list itself is. Why not the first? The first element of a list is
  instead used as an identifier of a function to be invoked. Here\rsquo{}s an example
  of the \lsquo{}+\rsquo{} function (note that in lisp, even standard arithmetic operators are
  functions):

#+begin_src elisp
  (+ 1 2 3)
#+end_src

  You no doubt have noticed that *prefix* ordering is the lisp way, which just
  means that operators get listed first, then come the operands (what operators
  operate on, also called arguments). This is very convenient and efficient. The
  more familiar *infix* ordering --- not so much.

#+begin_src elisp
  (1 + 2 + 3)
#+end_src

  Getting a message like \lsquo{}Invalid function: 1\rsquo{} is something you want to avoid!

  Still, if you prefer, emacs has an infix-supporting calculator that is built
  in. Or rather, you must first summon it like a genie by passing its name to
  the =require= function.

#+begin_src elisp
  (require 'calc)
  (calc-eval "1 + 2 + 3")
#+end_src

  A nested list, if well-formed, forms a more complex ele:

#+begin_src elisp
  (* 3 (+ 1 3 5))
#+end_src

#+begin_src elisp
  (+ 1 2 3 (* 4 5))
#+end_src

  What does well-formed mean? Well, here\rsquo{}s an example of bad form, *not* well-formed:

#+begin_src elisp
  ) 1 2 3 + (* 4 5)(
#+end_src

  Note that evaluating that code block produced no output, because the input was
  not well-formed. By the way, if you ever get thrown into the debugger (into a
  buffer named *Backtrace*), typing q will get you out. Trying to evaluate the
  unevaluatable in other interactions styles will likely put you in.
* Create and Render Lists
  The =list= function is your friend:

#+begin_src elisp
  (list 1 3 5)
#+end_src

  Note that lists are rendered in org-mode as tables, with vertical bars
  separating the list elements. This is a nifty feature! But one way to suppress
  that behavior is to \ldquo{}format\rdquo the list as a string. (The =format= function\rsquo{}s
  first argument is a \lsquo{}directive\rsquo{} (a string with a very idiosyncratic syntax)
  that tells it what to do with the rest of the arguments.)

#+begin_src elisp
  (format "%s" (list 1 2 3))
#+end_src

  \ldquo{}Quote\rdquo a list to suppress evaluation of its first element.

#+begin_src elisp
  (format "%s" '(1 2 3))
#+end_src

  Alternatively,

#+begin_src elisp
  (format "%s" (quote (1 2 3)))
#+end_src

  Use =format= with a capital S directive to keep the quotes when inserting the
  results of evaluating strings:

#+begin_src elisp
  (format "%S" "abc")
#+end_src
* Compare Vectors and Lists
  Related to lists are vectors, which unlike lists, self-evaluate (like most
  atoms):

#+begin_src elisp
  [A B C]
#+end_src

  Try this:

#+begin_src elisp
  (elt [A B C] 0)
#+end_src

  And this:

#+begin_src elisp
  (elt [A B C] 2)
#+end_src

  And this:

#+begin_src elisp
  (elt [A B C] 3)
#+end_src

  Oops! The function =elt=, by the way, is short for /element/.

  The string "abc" is composed of three characters, ?a, ?b, and ?c.

#+begin_src elisp
  ?a
#+end_src

#+begin_src elisp
  ?A
#+end_src

  The =elt= function works on strings as well as vectors, and the =vector=
  function creates, what? 

#+begin_src elisp
  (vector (elt "ABC" 0) (elt "abc" 1) (elt "XyZ" 2))
#+end_src
* Learn How to Append Lists and Vectors
#+begin_src elisp
  (append '(a b c) '(0 1 2))
#+end_src

#+begin_src elisp
  (append '(0 1 2) '("red" "green" "blue"))
#+end_src

#+begin_src elisp
  (append '(a b c) '("red" "green" "blue"))
#+end_src

#+begin_src elisp
  (append [a vector of symbols] '(0 1 2))
#+end_src

#+begin_src elisp
  (append [a b c] nil)
#+end_src

  Apparently, this last one serves to convert a vector into a list!
* Learn About =if=
  In other languages it\rsquo{}s traditional to call Boolean types true and false,
  where =true= and =false= are two of the language\rsquo{}s reserved keywords. This can
  be emulated in elisp, which will introduce one of many \ldquo{}conditional\rdquo
  constructs:

#+begin_src elisp
  (if t 'true 'false)
#+end_src

#+begin_src elisp
  (if nil 'true 'false)
#+end_src

#+begin_src elisp
  (if (< 1 3)
      "if-preceding-ele-is-true-evaluate-this-ele"
    "else-this-ele")
#+end_src

#+begin_src elisp
  (if (< 5 3)
      "if-preceding-ele-is-true-evaluate-this-ele"
    "else-this-ele")
#+end_src

  You\rsquo{}ll see more of this later. This is a \ldquo{}special form\rdquo, not a normal
  function, because only two of its three arguments are evaluated.
* Learn About Variables and Assignment
  Now, as defined in the built-in elisp documentation, a \ldquo{}variable\rdquo is a name
  used in a program to stand for a value.

  How are variables defined in lisp? Here\rsquo{}s one way:

#+begin_src elisp
  (defvar abc 123)
#+end_src

  The value of that ele is, as you might *not* not have been expecting, the
  symbol being defvar\rsquo{}ed rather than the value it\rsquo{}s initialized with.

  A variable can be said to be embodied in a =symbol=. However, lisp symbols are
  actually structures that can do much, much more than just name variables and
  store values.

  Symbols are not the same as strings (although their *names* are strings), so
  note the difference.

#+begin_src elisp
  "xyz"
#+end_src

#+begin_src elisp
  xyz
#+end_src

  Symbol's value as variable is void: xyz

  Thus we see that symbols do *NOT* self-evaluate. But you can make it so they
  self-evaluate by prefixing them with a colon, essentially turning them into
  /keywords/, which are meant to stand for themselves and not hold some value.
  For example:

#+begin_src elisp
  (format "The value of abc is %d" abc)
#+end_src

#+begin_src elisp
  abc
#+end_src

#+begin_src elisp
  (format "The value of :xyz is %s" :xyz)
#+end_src

#+begin_src elisp
  :xyz
#+end_src

  That\rsquo{}s all well and good, but how do you \ldquo{}assign\rdquo a new value to variables?
  The =setq= *special form* stands for \ldquo{}set quoted\rdquo, and is a convenient
  alternative to using the =set= *function* to make assignments of values to
  variables:

#+begin_src elisp
  (setq abc 789)
#+end_src

  which is equivalent to:

#+begin_src elisp
  (set (quote abc) 789)
#+end_src

  which is equivalent to:

#+begin_src elisp
  (set 'abc 789)
#+end_src

  In lisp, types are dynamic, not static like in many other programming
  languages. That means that variables do not have types, values do.

  The value type of the variable =abc= was initially a number, but it could just
  as well be changed by assignment later in its life to be a list of numbers:

#+begin_src elisp
  (setq abc '(1 2 3 4 5 6 7 8 9))
#+end_src

  Note the value of the =setq= ele is the value being set, in this case, a list.
  The value is *NOT* the symbol being set (remember =defvar=?).

#+begin_src elisp
  abc
#+end_src

  Since you assigned =abc= the list of numbers one through nine as its value,
  you can pass this list around as a unit by its neat symbol handle. It\rsquo{}s not
  really an atomic unit, but you can think of it as one.

  But how do you get to the elements of this non-atomic collection?

  It so happens that =elt= works on lists as well as vectors and strings!

#+begin_src elisp
  (elt abc 0)
#+end_src

#+begin_src elisp
  (elt abc 2)
#+end_src

  But the following accessor functions work *only* on lists:

#+begin_src elisp
  (first abc)
#+end_src

#+begin_src elisp
  (second abc)
#+end_src

#+begin_src elisp
  (third abc)
#+end_src

  How far do you think this progression goes? PVP please!

  Using numbers instead of words is more convenient. To get the \ldquo{}nth\rdquo element of
  a list:

#+begin_src elisp
  (nth 0 abc)
#+end_src

#+begin_src elisp
  (nth 8 abc)
#+end_src

  Note the swapping of the order of the arguments from the =elt= way.

  It\rsquo{}s easy to get the first thing, how about the rest of the list (everything
  *but* the first thing)?

#+begin_src elisp
  (rest abc)
#+end_src

#+begin_src elisp
  (rest (rest abc))
#+end_src

#+begin_src elisp
  (rest (rest (rest abc)))
#+end_src
* Learn About Functions
  There is no better way to start learning Functional Programming precepts than
  to learn about the core of FP -- functions!

#+begin_src elisp
  (defun my-function (number)
     (list number (* number number)))
#+end_src

#+begin_src elisp
  (list (my-function 1) (my-function 2) (my-function 3))
#+end_src

#+begin_src elisp
  (defun function-name (arguments-to-function)
     "Optional documentation string."
     (if arguments-to-function
         (list 'body 'forms (list 'to 'evaluate))))
#+end_src

  Can you predict the value \ldquo{}returned\rdquo by calling the above function with =t= as
  its (only) argument? 

#+begin_src elisp
  (function-name t)
#+end_src

  How about with =nil=?

#+begin_src elisp
  (function-name nil)
#+end_src

  Nada. Which means =nil= was the value.

  The built-in function called =rot13= is a fun one. See if you can predict the
  result of evaluating this ele:

#+begin_src elisp
  (rot13 "zvpxrl@znfgrevatrznpf.bet")
#+end_src

  How about this?!

#+begin_src elisp
  (rot13 (rot13 "zvpxrl@znfgrevatrznpf.bet"))
#+end_src

  As in most other languages, in elisp functions can call themselves recursively:

#+begin_src elisp
  (defun frobulate (x)
     (if x (append (frobulate (rest x)) (list (first x)))))
#+end_src

  PVP --- and then propose a more descriptive name for this function:

#+begin_src elisp
  (frobulate '(1 2 3 4 5 6 7))
#+end_src
* Read and Heed a Scripture
  Liken [[https://www.lds.org/languages/eng/content/scriptures/ot/isa/28.10#9][Isaiah 28:10]] to yourself, take a break and pause to absorb what you\rsquo{}ve
  learned!

