-*- mode: org -*-
#+title: Presentation 13
#+language: en
#+options: H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t d:(not \ldquo{}HINT\rdquo)
#+startup: entitiespretty showeverything
#+setupfile: theme-bigblow.setup.hide

:HINT:
 Click your mouse on the links below, or with your cursor somewhere in them,
 press the Enter key.

[[elisp:(relocate-file-to-work-folder)][Relocate File to Work Folder]]

[[elisp:(browse-url-of-file(org-html-export-to-html))][Export to HTML and Browse]]
:END:
* Presentation
** Discuss Languages and Grammars More
*** 1
    Where \Sigma = {0, 1}:

    What language does this grammar generate?

     S \rarr 0S
     S \rarr 1S
     S \rarr \lambda
**** Answer
     \Sigma^{\star} = {"", 0, 1, 00, 01, 10, 11, 000, 001, ...}
**** What type of grammar is it?
     Right-Linear, in other words, Type 3.
*** 2
     What grammar would generate this language?

     L = {0^{n}1^{m} | n, m \ge 0}
**** Answer
     S \rarr AB
     S \rarr \lambda
     A \rarr 0A
     B \rarr 1B
     A \rarr \lambda
     B \rarr \lambda
**** What type of grammar is it?
     Context Free, Type 2.
*** 3
    What language?
      S \rarr 0T
      T \rarr S1
      S \rarr \lambda
**** Answer
     L_{0n1n} = {0^{n}1^{n} | n \ge 0}
**** What type of grammar?
      Context Free, Type 2
*** 4
    What language?
     S \rarr 0S1
     S \rarr \lambda
**** Answer
     L_{0n1n} = {0^{n}1^{n} | n \ge 0}
**** What type of grammar?
      Context Free, Type 2
*** 5
    What language?

    S \rarr main Paren Braces
    Paren \rarr ()
    Braces \rarr { Braces }
    Braces \rarr \lambda
**** Answer
    L_C_{NOP} = {main(){^n}^n | n \ge 0}
**** What type of grammar?
      Context Free, Type 2
*** 6
    L_{ww} = {ww | w \in {0, 1}^*}
**** The surprise
     It may come as a surprise that most programming languages are *not*
     context-free! For instance, in C, we can declare function *prototypes* that
     can introduce an arbitrary number of arguments. Later, when the function
     is defined, the same arguments must appear in the same order. The above
     language L_{ww} captures the essence of such \ldquo{}define/use\rdquo structures.
*** 7
    What language?

    S \rarr AB
    S \rarr BA
    S \rarr A
    S \rarr B
    A \rarr CAC
    A \rarr 0
    B \rarr CBC
    B \rarr 1
    C \rarr 0
    C \rarr 1
**** Answer
     This language is the *complement* of L_{ww}.
** Recall [[file:expound-on-topics-12.txt::*Regular%20Languages][Regular Expressions]].
   Let us describe the language generated by this (what type?) grammar using a
   regular expression:

    S \rarr TT  (1)
    T \rarr UT  (2)
    T \rarr U   (3)
    U \rarr 0U  (4)
    U \rarr 1U  (5)
    U \rarr \lambda   (6)
*** Answer
    (0 + 1)^{\star} \equiv \Sigma^{\star}
**** Sample Derivation
   | S | \rarr | TT     | Rule 1 |
   |   | \rarr | UTT    | Rule 2 |
   |   | \rarr | 0UTT   | Rule 4 |
   |   | \rarr | 00UTT  | Rule 4 |
   |   | \rarr | 00TT   | Rule 6 |
   |   | \rarr | 00UT   | Rule 3 |
   |   | \rarr | 001UT  | Rule 5 |
   |   | \rarr | 0011UT | Rule 5 |
   |   | \rarr | 0011T  | Rule 6 |
   |   | \rarr | 0011U  | Rule 3 |
   |   | \rarr | 00110U | Rule 4 |
   |   | \rarr | 00110  | Rule 6 |
**** Simple
     S \rarr 0S
     S \rarr 1S
     S \rarr \lambda
