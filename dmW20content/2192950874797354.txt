-*- mode: org -*-
#+title: Assignment 12
#+subtitle: VWX Graphs II
#+language: en
#+options: H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t d:(not "HINT")
#+startup: entitiespretty showeverything
#+setupfile: theme-bigblow.setup

:HINT:
 Click your mouse on the links below, or with your cursor somewhere in them,
 press the Enter key.

[[elisp:(relocate-file-to-work-folder)][Relocate File to Work Folder]]

[[elisp:(find-file-other-window "generic-instructions.txt")][Read Instructions]]

[[elisp:(browse-url-of-file (org-html-export-to-html))][Export to HTML and Browse]]

[[elisp:(org-clock-report 1)][Insert/Update Clock Summary Report]]
:END:
* Exercises
** TODO HAX
#+begin_note
  What are /m/ and /n/ for the three /K_{m,n}/ graphs in figures 87, 88 and 89,
  in VWQ?
#+end_note
#+begin_info
  Your answer goes here.
#+end_info
** TODO HKE
#+begin_note
  Investigate bipartite graphs and complete bipartite graphs. What kinds of
  applications fit these types of graphs?
#+end_note
#+begin_info
  Your answer goes here.
#+end_info
** TODO KBB
#+begin_note
  What would a /tri/-partite graph look like? An /n/-partite graph?
#+end_note
#+begin_info
  Your answer goes here.
#+end_info
** TODO HRL
#+begin_note
  Draw this small graph having 8 nodes and 13 links:

: pq pn qn pt qt et dt de me mn mc cd cn
:HINT:
  - Hint :: To draw this graph neatly, think Argyle!
:END:
#+end_note
#+begin_info
  Your answer goes here.
#+end_info
** TODO KHO
#+begin_note
  Describe /H/ in terms of subsets of /G/ if /G/ = =[[a b c d e f g h i j]
             [[a b] [a c] [a g] [b d] [b f] [b e] [c d] [c f] [c g] [c h]=
              =[d e] [d g] [d h] [e i] [e j] [f i] [g h] [h i] [i j]]]=.

  Graph /H/ is shown in figure 93 in VWS.
#+end_note
#+begin_info
  Your answer goes here.
#+end_info
** TODO HLX
#+begin_note
  Since graphs are defined in terms of sets, define *graph intersection*
  accordingly. Give an example.
#+end_note
#+begin_info
  Your answer goes here.
#+end_info
** TODO HBE
#+begin_note
  A *planar graph* is a graph that can be embedded in the plane, i.e., it can be
  drawn on the plane in such a way that its links intersect only at their
  endpoints. In other words, it can be drawn in such a way that no link lines
  cross each other.

  True or false, the RSA graph is a planar graph.
:HINT:
  - Hint :: To save you the trouble of searching, the RSA graph is shown in VWB.
            Also, look at the K_4 graph(s) in VWM before leaping to an erroneous
            conclusion! (The key phrase is \ldquo{}*can* be drawn\rdquo.)
:END:
#+end_note
#+begin_info
  Your answer goes here.
#+end_info

#+BEGIN_SRC dot :file rsa.png
  graph {
    bgcolor=transparent
    rankdir=LR
    n -- p -- q -- t -- e -- d
    c -- m -- e
    c -- n -- m
    rankdir=TB
    p -- t -- d
    c -- d
    n -- q
   {rank=same m c}
   {rank=same d e}
   {rank=same p q}
  }
#+END_SRC

* Problems
  Note: * means optional. If it\rsquo{}s not starred, it\rsquo{}s required.
** TODO HJS
#+begin_note
  /Q_n/ graphs have /2^n/ nodes. How many links do /Q_n/ graphs have?
:HINT:
  The answer is a non-trivial function of /n/.
:END:
#+end_note
#+begin_info
  Your answer goes here.
#+end_info
** TODO KHQ
#+begin_note
  In what sense is a /K_{3,3}/ like a /K_5/?
:HINT:
 - Hint :: The latter was said to come last but not least above --- but it /is/
           least in this sense.
:END:
#+end_note
#+begin_info
  Your answer goes here.
#+end_info
** TODO AGD *
#+begin_note
  The following code creates adjacency lists. Try it out on the
  =graph-11-27-links= list. Add to this code the functionality necessary to
  building the above adjacency-list table. (Search for \ldquo{}In adjacency-list form:\rdquo
  in VWR.)

#+BEGIN_SRC emacs-lisp :results silent
  (defun make-adjacency-list (node links)
    "Make the adjacency list of a node by collecting
  all the nodes it's connected to in links."
    (loop for link in links
          if (= node (car link))
          collect (cdr link)))

  (defun make-adjacency-list-in-reverse (node links)
    "Make the reverse adjacency list of a node by collecting
  all the nodes connected to it in links."
    (loop for link in links
          if (= node (cdr link))
          collect (car link)))

  (defun make-adjacency-lists (nodes links)
    "Make adjacency lists given a graph's nodes and links
  by collecting the adjacency lists and reverse adjacency lists
  for each of the graph's nodes, removing any duplicates found."
    (let ((alists nil) the-nodes-alist)
      (loop for node in nodes
            do (setq the-nodes-alist
                     (remove-duplicates
                      (nconc (make-adjacency-list node links)
                             (make-adjacency-list-in-reverse node links)))
                     alists (nconc alists (list (cons node the-nodes-alist)))))
      alists))
#+END_SRC
#+end_note
#+begin_info
  Your answer goes here.
#+end_info
** TODO HSG *
#+begin_note
  Write the code to =make-adjacency-matrix= given a graph\rsquo{}s nodes and links.
#+end_note
#+begin_info
  Your answer goes here.
#+end_info
** TODO ANA *
#+begin_note
  Armed with a knowledge of what complete graphs (the K_n) are, and what
  subgraphs and graph representations are, you are ready to apply that
  knowledge.

  Another name for a complete graph is a word that in high school is often
  mispronounced as /click/. Making it rhyme with the second syllable of the
  words /antique/ or /technique/ is the correct way to pronounce /clique/.

  Think about how to /verify/ this graph property.

  To give an operational definition, a clique is a subgraph of a given graph in
  which every two nodes are connected by a link. An /anti/-clique is a subgraph
  in which every two nodes are /not/ connected by a link. (Note that this is the
  same as saying that /no/ two nodes in this subgraph are connected. Or in other
  words, they form an /independent set/ of nodes --- nodes that are all
  independent of each other.) Searching through a specified graph, a verifier
  would check the alleged "clique-ness" or "anti-clique-ness" of a given list of
  nodes.

  Use the code below as a starting point. Decide how to represent a graph. Use
  the =link-exists= predicate as is, or change it to suit. If you decide as is
  is good enough, you will still need to implement the =get-adjacency-list=
  function. Test several graphs and various-sized candidate node lists using a
  suitably implemented =check-clique-or-anti-clique= function.

#+BEGIN_SRC emacs-lisp
  (defun link-exists (graph-representation node1 node2)
    "Given a graph representation, is there a link between node1 and node2?"
    (not
     (null
      (or
       (member node2 (get-adjacency-list graph-representation node1))
       (member node1 (get-adjacency-list graph-representation node2))))))

  (defun check-clique-or-anti-clique (graph-representation nodes anti)
    "Checks if the represented graph contains a subgraph consisting of
  the given nodes that is a clique (if anti is nil) or an anti-clique
  (if anti is t). Returns t or nil appropriately."
     ;; ... your code goes here
    )
#+END_SRC
#+end_note
#+begin_info
  Your answer goes here.
#+end_info
** TODO KSI
#+begin_note
  Not to be confused with *graph intersection*, the *intersection graph* of a
  collection of sets A_1, A_2, \dots, A_n is the graph that has a node for each of
  these sets and has a link connecting the nodes representing two sets if these
  sets have a nonempty intersection.

  Construct the intersection graph of this collection of five sets:

  | Set Name | Set Elements       |
  |----------+--------------------|
  | A_1       | [-4 -3 -2 -1 0]    |
  | A_2       | [-2 -1 0 1 2]      |
  | A_3       | [-6 -4 -2 0 2 4 6] |
  | A_4       | [-5 -3 -1 1 3 5]   |
  | A_5       | [-6 -3 0 3 6]      |

  Draw this graph. What is its degree sequence?
#+end_note
#+begin_info
  Your answer goes here.
#+end_info
** TODO KSQ
#+begin_note
  Construct a graph using the following list of eight words as node labels:

: dine done gone tine tone wind wine wins

  Link two nodes if they differ in only one letter /in the same position/ (e.g.,
  =wind= and =wins= differ in the fourth letter only, so that defines a link.
  But =dine= and =tone= differ in the first /and/ second letters, so no link
  there).

  Randomly select two nodes of this graph. What is the probability that there is
  a link between those two nodes?
#+end_note
#+begin_info
  Your answer goes here.
#+end_info
** TODO KSC *
#+begin_note
  Generalizing, the Ramsey function /R/ with two parameters, /R(i, j)/, returns the
  minimum /n/ for which in a /K_n/ graph where the links are colored with two
  colors, there must exist either an embedded /K_i/ subgraph whose links are all
  of the first color, or an embedded /K_j/ subgraph whose links are all of the
  second color. As is fairly easily shown, /R(3, 3) = 6/. Many others of these
  so-called /Ramsey numbers/ are known and are provable, e.g., /R(4, 4) = 18/ and
  /R(4, 5) = 25/, but most are not. For example, it is known that R(5, 5) is at
  least 43 and at most 48, but which number between 43 and 48 is the exact value
  is unknown. Why is that? Research and describe why we are currently unable to
  nail this value down. (For starters, [[http://ginger.indstate.edu/ge/RAMSEY/r.5.5.html][Geoff Exoo]] found that there is a /K_{42}/
  that is link-2-colorable but has no same-colored triangles.)
#+end_note
#+begin_info
  Your answer goes here.
#+end_info
* Puzzles
  Puzzle, to be precise.
** TODO HTR
#+begin_note
  What does it mean to say that \({\sf VWX}\) has
: ([2 1 1] [2 2 2 1 1] [4 1 1 1 1])
  as its list of degree sequences?
#+end_note
*** Rephrase
*** Approach
*** Solution
*** Proof
