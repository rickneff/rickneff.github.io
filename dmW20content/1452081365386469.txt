-*- mode: org -*-
#+title: Presentation 04
#+subtitle: Regular Languages and the Pumping Lemma
#+language: en
#+options: H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t d:(not "HINT")
#+startup: entitiespretty showeverything
#+setupfile: theme-bigblow.setup

* TODO Look At a Series of Proof Problems
** TODO Easiest Proof Problem

   Prove that if \( a \equiv b \pmod{5} \) where /a/ and /b/ are integers, then
   \( a^2 \equiv b^2 \pmod{5} \).

   (What about the converse?)

** TODO Easy Proof Problem

     Prove that for every natural number \(n\), there exist integers \(a, b\) such
     that \( n = 3a + 7b \).

     Can you generalize this result?

** TODO Hard Proof Problem

   Show that for $n \ge 2$, the sum $1 + \frac{1}{2} + \cdots + \frac{1}{n}$ is never an integer.

   In other words, for $n \ge 2$, $\sum_{i = 1}^n \frac{1}{i}$ is never an integer.

** TODO Harder Proof Problem

   Given that

   \( \frac{1}{n(n+1)} = \frac{1}{n} - \frac{1}{n+1}, \)

   what is the value of the summation

   \( \sum^{\infty}_{n=1} \frac{b(n)}{n(n+1)} \)

   where \( b(n) \) counts the number of ones in the binary expansion of \(n\)?

   The harder question is, why does this value converge to the number it does?
   Can you find an expression in common mathematical symbols (using 5 or fewer
   characters) for this value? And what does binary expansion have to do with
   why this value is what it is? How would you prove it?

   Hint: you may find it helpful at some point to refer to the Theoretical
   Computer Science Cheat Sheet, which can be found online.

** TODO Hardest Proof Problem

   Prove that \( a^4 + b^4 + c^4 = d^4 \) has no positive integer solutions.

* TODO Talk about Regular Languages/Regular Expressions
** From [[https://rickneff.github.io/metaphors-be-with-you.html][Metaphors Be With You]] section YZJ
*** More Detail
 A language is /regular/ *iff* some /regular expression/ describes it.

 Regular expressions use the so-called regular operations (\cup, \circ, and \star) ---
 (union, concatenation, and star) --- to build regular languages. Here is a
 recursive definition:

R is a *regular expression* (an *re* for short) if R is any of

- \emptyset
- {\lambda}
- {a} for some a \in \Sigma
- R_1 \cup R_2, where R_1 and R_2 are *re*\rsquo{}s
- R_1 \circ R_2, where R_1 and R_2 are *re*\rsquo{}s
- R^{\star}, where R is an *re*

Some shorthand:

- a \equiv \{a\}
- \lambda \equiv \{\lambda\}
- R^{\plus} \equiv R \circ R^{\star}
- R^{\star} \equiv R^{\plus} \cup \lambda
- R^k \equiv R \circ R \circ R \circ \dots \circ R (k times)

Note: R \circ R is usually written without the \circ, i.e., RR. In this way \circ is
analogous to the multiplication operator.

  See YZJ.
** TODO Give some examples of *re*'s

     \Sigma = {0, 1}
     01
     01 \cup 10
     \empty
     0^*1^*
     1^7 \cup 0^7

* TODO Introduce The Pumping Lemma
   The PL is not a theorem, although it reads like one.

   It is an exemplary proof-by-contradiction helper (which is what lemmas do ---
   help you prove theorems).

   Example on board --- prelude to CDL.
