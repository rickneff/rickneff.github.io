-*- mode: org -*-
#+title: Presentation 12
#+language: en
#+options: H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t d:(not \ldquo{}HINT\rdquo)
#+startup: entitiespretty showeverything
#+setupfile: theme-bigblow.setup.hide

:HINT:
 Click your mouse on the links below, or with your cursor somewhere in them,
 press the Enter key.

[[elisp:(relocate-file-to-work-folder)][Relocate File to Work Folder]]

[[elisp:(browse-url-of-file(org-html-export-to-html))][Export to HTML and Browse]]
:END:
* Discuss Language In General
** What IS Language?
   A (human) language has three elements:
*** Meaning
    --- not conveyed, but called forth.
*** Productivity
    --- you can use the same old words to make new communications.
*** Displacement
    --- you can use language to talk about things that aren\rsquo{}t present.

** We Will Never Stop
   Humans enhance productivity by making language /recursive/
   --- using *rules* to combine individual sounds and words into an
   infinite number of different sentences with different
   meanings.
* Discuss English and Programming Languages
  An undisputed master of language, Edgar Allan Poe once bragged about his Power
  of Words:

#+BEGIN_QUOTE
  How very commonly we hear it remarked that such and such thoughts are
  beyond the compass of words! I do not believe that any thought,
  properly so called, is out of the reach of language. I fancy, rather,
  that where difficulty in expression is experienced, there is, in the
  intellect which experiences it, a want either of deliberateness or of
  method.

  For my own part, I have never had a thought which I could not set down
  in words, with even more distinctness than that with which I conceived
  it: as I have before observed, the thought is logicalised by the
  effort at (written) expression.
#+END_QUOTE
** But Even Poe Would Struggle With
   the ambiguities, paradoxes and contradictions *recursion* (or *self-reference*)
   creates at the English language level.
*** 1
    This sentence is false.
*** 2
    \ldquo{}Teachers\rdquo has eight letters.
*** 3
    Teachers make lots of money.
**** Recall
     This is called the /Use-Mention distinction/.
***** My book has this example
       Idaho has mountains.
      \ldquo{}Idaho\rdquo has 5 letters.
** An Operation
   called \ldquo{}Quining\rdquo (or the \ldquo{}Quine\rdquo operation):

   \ldquo{}yields falsehood when preceded by its quotation\rdquo
    yields falsehood when preceded by its quotation
*** Quoting Wikipedia
   This operation shows that a sentence can be paradoxical even if it is not
   self-referring and does not use demonstratives or indexicals.
*** 1
    \ldquo{}is a sentence fragment\rdquo is a sentence fragment
*** 2
    This sentence no verb.
*** 3
    This sentence has six words.
*** 4
      How about quining in a high-level programming language?
#+begin_src C :results output
char*s="char*s=%c%s%c;printf(s,34,s,34);";printf(s,34,s,34);
#+end_src

#+results:
: char*s="char*s=%c%s%c;printf(s,34,s,34);";printf(s,34,s,34);

**** How about
       Lisp?!
#+begin_src elisp :results raw
  ((lambda (x) (list x (list (quote quote) x))) (quote (lambda (x) (list x (list (quote quote) x)))))
#+end_src

#+results:
  ((lambda (x) (list x (list (quote quote) x))) (quote (lambda (x) (list x (list (quote quote) x)))))

**** What About
#+begin_src java :classname Self :results output
 public class Self{public static void main(String[] args){String s="public class Self{public static void main(String[] args){String s=%c%s%c;System.out.printf(s,34,s,34);}}";System.out.printf(s,34,s,34);}}
#+end_src

#+begin_src sh :results silent
  rm -f Dupe.java
#+end_src
  file:Dupe.java
#+begin_src java :classname Dupe :results output
/* Dupe.java by Mark D. LaDue */

/* December 18, 1996 */

/*  Copyright (c) 1996 Mark D. LaDue
    You may study, use, modify, and distribute this example for any purpose.
    This example is provided WITHOUT WARRANTY either expressed or implied.  */

/*  This Java application is an example of a self-reproducing program, and
    as such it exhibits prototypical virus-like behavior.  To test it,
    at the command line proceed as follows:

    1. Type "java Dupe.java" to get Dupe.class.
    2. Move Dupe.class to an entirely different directory.
    3. In that different directory type "java Dupe" to run the application.
    4. Inspect the resulting output Dupe.java, which will be exactly the
       same as the original.

    In addition to reproducing itself, the application echoes a wisecrack
    to the standard output.  */

import java.io.*;
class Dupe {
    public static void main (String[] argv) {
int[] src1 = {
47,
42,
32,
68,
117,
112,
101,
46,
106,
97,
118,
97,
32,
98,
121,
32,
77,
97,
114,
107,
32,
68,
46,
32,
76,
97,
68,
117,
101,
32,
42,
47,
10,
10,
47,
42,
32,
68,
101,
99,
101,
109,
98,
101,
114,
32,
49,
56,
44,
32,
49,
57,
57,
54,
32,
42,
47,
10,
10,
47,
42,
32,
32,
67,
111,
112,
121,
114,
105,
103,
104,
116,
32,
40,
99,
41,
32,
49,
57,
57,
54,
32,
77,
97,
114,
107,
32,
68,
46,
32,
76,
97,
68,
117,
101,
10,
32,
32,
32,
32,
89,
111,
117,
32,
109,
97,
121,
32,
115,
116,
117,
100,
121,
44,
32,
117,
115,
101,
44,
32,
109,
111,
100,
105,
102,
121,
44,
32,
97,
110,
100,
32,
100,
105,
115,
116,
114,
105,
98,
117,
116,
101,
32,
116,
104,
105,
115,
32,
101,
120,
97,
109,
112,
108,
101,
32,
102,
111,
114,
32,
97,
110,
121,
32,
112,
117,
114,
112,
111,
115,
101,
46,
10,
32,
32,
32,
32,
84,
104,
105,
115,
32,
101,
120,
97,
109,
112,
108,
101,
32,
105,
115,
32,
112,
114,
111,
118,
105,
100,
101,
100,
32,
87,
73,
84,
72,
79,
85,
84,
32,
87,
65,
82,
82,
65,
78,
84,
89,
32,
101,
105,
116,
104,
101,
114,
32,
101,
120,
112,
114,
101,
115,
115,
101,
100,
32,
111,
114,
32,
105,
109,
112,
108,
105,
101,
100,
46,
32,
32,
42,
47,
10,
10,
47,
42,
32,
32,
84,
104,
105,
115,
32,
74,
97,
118,
97,
32,
97,
112,
112,
108,
105,
99,
97,
116,
105,
111,
110,
32,
105,
115,
32,
97,
110,
32,
101,
120,
97,
109,
112,
108,
101,
32,
111,
102,
32,
97,
32,
115,
101,
108,
102,
45,
114,
101,
112,
114,
111,
100,
117,
99,
105,
110,
103,
32,
112,
114,
111,
103,
114,
97,
109,
44,
32,
97,
110,
100,
10,
32,
32,
32,
32,
97,
115,
32,
115,
117,
99,
104,
32,
105,
116,
32,
101,
120,
104,
105,
98,
105,
116,
115,
32,
112,
114,
111,
116,
111,
116,
121,
112,
105,
99,
97,
108,
32,
118,
105,
114,
117,
115,
45,
108,
105,
107,
101,
32,
98,
101,
104,
97,
118,
105,
111,
114,
46,
32,
32,
84,
111,
32,
116,
101,
115,
116,
32,
105,
116,
44,
10,
32,
32,
32,
32,
97,
116,
32,
116,
104,
101,
32,
99,
111,
109,
109,
97,
110,
100,
32,
108,
105,
110,
101,
32,
112,
114,
111,
99,
101,
101,
100,
32,
97,
115,
32,
102,
111,
108,
108,
111,
119,
115,
58,
10,
10,
32,
32,
32,
32,
49,
46,
32,
84,
121,
112,
101,
32,
34,
106,
97,
118,
97,
32,
68,
117,
112,
101,
46,
106,
97,
118,
97,
34,
32,
116,
111,
32,
103,
101,
116,
32,
68,
117,
112,
101,
46,
99,
108,
97,
115,
115,
46,
10,
32,
32,
32,
32,
50,
46,
32,
77,
111,
118,
101,
32,
68,
117,
112,
101,
46,
99,
108,
97,
115,
115,
32,
116,
111,
32,
97,
110,
32,
101,
110,
116,
105,
114,
101,
108,
121,
32,
100,
105,
102,
102,
101,
114,
101,
110,
116,
32,
100,
105,
114,
101,
99,
116,
111,
114,
121,
46,
10,
32,
32,
32,
32,
51,
46,
32,
73,
110,
32,
116,
104,
97,
116,
32,
100,
105,
102,
102,
101,
114,
101,
110,
116,
32,
100,
105,
114,
101,
99,
116,
111,
114,
121,
32,
116,
121,
112,
101,
32,
34,
106,
97,
118,
97,
32,
68,
117,
112,
101,
34,
32,
116,
111,
32,
114,
117,
110,
32,
116,
104,
101,
32,
97,
112,
112,
108,
105,
99,
97,
116,
105,
111,
110,
46,
10,
32,
32,
32,
32,
52,
46,
32,
73,
110,
115,
112,
101,
99,
116,
32,
116,
104,
101,
32,
114,
101,
115,
117,
108,
116,
105,
110,
103,
32,
111,
117,
116,
112,
117,
116,
32,
68,
117,
112,
101,
46,
106,
97,
118,
97,
44,
32,
119,
104,
105,
99,
104,
32,
119,
105,
108,
108,
32,
98,
101,
32,
101,
120,
97,
99,
116,
108,
121,
32,
116,
104,
101,
10,
32,
32,
32,
32,
32,
32,
32,
115,
97,
109,
101,
32,
97,
115,
32,
116,
104,
101,
32,
111,
114,
105,
103,
105,
110,
97,
108,
46,
10,
10,
32,
32,
32,
32,
73,
110,
32,
97,
100,
100,
105,
116,
105,
111,
110,
32,
116,
111,
32,
114,
101,
112,
114,
111,
100,
117,
99,
105,
110,
103,
32,
105,
116,
115,
101,
108,
102,
44,
32,
116,
104,
101,
32,
97,
112,
112,
108,
105,
99,
97,
116,
105,
111,
110,
32,
101,
99,
104,
111,
101,
115,
32,
97,
32,
119,
105,
115,
101,
99,
114,
97,
99,
107,
10,
32,
32,
32,
32,
116,
111,
32,
116,
104,
101,
32,
115,
116,
97,
110,
100,
97,
114,
100,
32,
111,
117,
116,
112,
117,
116,
46,
32,
32,
42,
47,
10,
10,
105,
109,
112,
111,
114,
116,
32,
106,
97,
118,
97,
46,
105,
111,
46,
42,
59,
10,
99,
108,
97,
115,
115,
32,
68,
117,
112,
101,
32,
123,
10,
32,
32,
32,
32,
112,
117,
98,
108,
105,
99,
32,
115,
116,
97,
116,
105,
99,
32,
118,
111,
105,
100,
32,
109,
97,
105,
110,
32,
40,
83,
116,
114,
105,
110,
103,
91,
93,
32,
97,
114,
103,
118,
41,
32,
123,
10,
};
int[] src2 = {
32,
32,
32,
32,
32,
32,
32,
32,
98,
121,
116,
101,
91,
93,
32,
98,
101,
103,
105,
110,
110,
105,
110,
103,
32,
61,
32,
110,
101,
119,
32,
98,
121,
116,
101,
91,
115,
114,
99,
49,
46,
108,
101,
110,
103,
116,
104,
93,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
102,
111,
114,
32,
40,
105,
110,
116,
32,
105,
61,
48,
59,
32,
105,
60,
115,
114,
99,
49,
46,
108,
101,
110,
103,
116,
104,
59,
32,
105,
43,
43,
41,
32,
123,
10,
32,
32,
32,
32,
32,
32,
32,
32,
32,
32,
32,
32,
98,
101,
103,
105,
110,
110,
105,
110,
103,
91,
105,
93,
32,
61,
32,
40,
98,
121,
116,
101,
41,
32,
115,
114,
99,
49,
91,
105,
93,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
125,
10,
32,
32,
32,
32,
32,
32,
32,
32,
116,
114,
121,
32,
123,
10,
32,
32,
32,
32,
32,
32,
32,
32,
80,
114,
105,
110,
116,
83,
116,
114,
101,
97,
109,
32,
111,
117,
116,
101,
114,
32,
61,
32,
110,
101,
119,
32,
80,
114,
105,
110,
116,
83,
116,
114,
101,
97,
109,
40,
110,
101,
119,
32,
70,
105,
108,
101,
79,
117,
116,
112,
117,
116,
83,
116,
114,
101,
97,
109,
40,
34,
68,
117,
112,
101,
46,
106,
97,
118,
97,
34,
41,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
119,
114,
105,
116,
101,
40,
98,
101,
103,
105,
110,
110,
105,
110,
103,
44,
32,
48,
44,
32,
98,
101,
103,
105,
110,
110,
105,
110,
103,
46,
108,
101,
110,
103,
116,
104,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
119,
114,
105,
116,
101,
40,
49,
48,
53,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
119,
114,
105,
116,
101,
40,
49,
49,
48,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
119,
114,
105,
116,
101,
40,
49,
49,
54,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
119,
114,
105,
116,
101,
40,
57,
49,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
119,
114,
105,
116,
101,
40,
57,
51,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
119,
114,
105,
116,
101,
40,
51,
50,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
119,
114,
105,
116,
101,
40,
49,
49,
53,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
119,
114,
105,
116,
101,
40,
49,
49,
52,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
119,
114,
105,
116,
101,
40,
57,
57,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
119,
114,
105,
116,
101,
40,
52,
57,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
119,
114,
105,
116,
101,
40,
51,
50,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
119,
114,
105,
116,
101,
40,
54,
49,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
119,
114,
105,
116,
101,
40,
51,
50,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
119,
114,
105,
116,
101,
40,
49,
50,
51,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
119,
114,
105,
116,
101,
40,
49,
48,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
102,
111,
114,
32,
40,
105,
110,
116,
32,
105,
61,
48,
59,
32,
105,
60,
115,
114,
99,
49,
46,
108,
101,
110,
103,
116,
104,
59,
32,
105,
43,
43,
41,
32,
123,
10,
32,
32,
32,
32,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
112,
114,
105,
110,
116,
40,
115,
114,
99,
49,
91,
105,
93,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
119,
114,
105,
116,
101,
40,
52,
52,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
119,
114,
105,
116,
101,
40,
49,
48,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
125,
10,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
119,
114,
105,
116,
101,
40,
49,
50,
53,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
119,
114,
105,
116,
101,
40,
53,
57,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
119,
114,
105,
116,
101,
40,
49,
48,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
98,
121,
116,
101,
91,
93,
32,
101,
110,
100,
32,
61,
32,
110,
101,
119,
32,
98,
121,
116,
101,
91,
115,
114,
99,
50,
46,
108,
101,
110,
103,
116,
104,
93,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
102,
111,
114,
32,
40,
105,
110,
116,
32,
105,
61,
48,
59,
32,
105,
60,
115,
114,
99,
50,
46,
108,
101,
110,
103,
116,
104,
59,
32,
105,
43,
43,
41,
32,
123,
10,
32,
32,
32,
32,
32,
32,
32,
32,
32,
32,
32,
32,
101,
110,
100,
91,
105,
93,
32,
61,
32,
40,
98,
121,
116,
101,
41,
32,
115,
114,
99,
50,
91,
105,
93,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
125,
10,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
119,
114,
105,
116,
101,
40,
49,
48,
53,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
119,
114,
105,
116,
101,
40,
49,
49,
48,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
119,
114,
105,
116,
101,
40,
49,
49,
54,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
119,
114,
105,
116,
101,
40,
57,
49,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
119,
114,
105,
116,
101,
40,
57,
51,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
119,
114,
105,
116,
101,
40,
51,
50,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
119,
114,
105,
116,
101,
40,
49,
49,
53,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
119,
114,
105,
116,
101,
40,
49,
49,
52,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
119,
114,
105,
116,
101,
40,
57,
57,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
119,
114,
105,
116,
101,
40,
53,
48,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
119,
114,
105,
116,
101,
40,
51,
50,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
119,
114,
105,
116,
101,
40,
54,
49,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
119,
114,
105,
116,
101,
40,
51,
50,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
119,
114,
105,
116,
101,
40,
49,
50,
51,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
119,
114,
105,
116,
101,
40,
49,
48,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
102,
111,
114,
32,
40,
105,
110,
116,
32,
105,
61,
48,
59,
32,
105,
60,
115,
114,
99,
50,
46,
108,
101,
110,
103,
116,
104,
59,
32,
105,
43,
43,
41,
32,
123,
10,
32,
32,
32,
32,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
112,
114,
105,
110,
116,
40,
115,
114,
99,
50,
91,
105,
93,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
119,
114,
105,
116,
101,
40,
52,
52,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
119,
114,
105,
116,
101,
40,
49,
48,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
125,
10,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
119,
114,
105,
116,
101,
40,
49,
50,
53,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
119,
114,
105,
116,
101,
40,
53,
57,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
119,
114,
105,
116,
101,
40,
49,
48,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
119,
114,
105,
116,
101,
40,
101,
110,
100,
44,
32,
48,
44,
32,
101,
110,
100,
46,
108,
101,
110,
103,
116,
104,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
111,
117,
116,
101,
114,
46,
99,
108,
111,
115,
101,
40,
41,
59,
10,
32,
32,
32,
32,
32,
32,
32,
32,
125,
32,
99,
97,
116,
99,
104,
32,
40,
73,
79,
69,
120,
99,
101,
112,
116,
105,
111,
110,
32,
105,
111,
101,
41,
32,
123,
125,
10,
32,
32,
32,
32,
32,
32,
32,
32,
83,
121,
115,
116,
101,
109,
46,
111,
117,
116,
46,
112,
114,
105,
110,
116,
108,
110,
40,
34,
85,
78,
73,
88,
32,
97,
110,
100,
32,
74,
97,
118,
97,
32,
118,
105,
114,
117,
115,
101,
115,
32,
100,
111,
32,
110,
111,
116,
32,
101,
120,
105,
115,
116,
46,
34,
41,
59,
10,
32,
32,
32,
32,
125,
10,
125,
10,
};
        byte[] beginning = new byte[src1.length];
        for (int i=0; i<src1.length; i++) {
            beginning[i] = (byte) src1[i];
        }
        try {
        PrintStream outer = new PrintStream(new FileOutputStream("Dupe.java"));
        outer.write(beginning, 0, beginning.length);
        outer.write(105);
        outer.write(110);
        outer.write(116);
        outer.write(91);
        outer.write(93);
        outer.write(32);
        outer.write(115);
        outer.write(114);
        outer.write(99);
        outer.write(49);
        outer.write(32);
        outer.write(61);
        outer.write(32);
        outer.write(123);
        outer.write(10);
        for (int i=0; i<src1.length; i++) {
            outer.print(src1[i]);
            outer.write(44);
            outer.write(10);
        }
        outer.write(125);
        outer.write(59);
        outer.write(10);
        byte[] end = new byte[src2.length];
        for (int i=0; i<src2.length; i++) {
            end[i] = (byte) src2[i];
        }
        outer.write(105);
        outer.write(110);
        outer.write(116);
        outer.write(91);
        outer.write(93);
        outer.write(32);
        outer.write(115);
        outer.write(114);
        outer.write(99);
        outer.write(50);
        outer.write(32);
        outer.write(61);
        outer.write(32);
        outer.write(123);
        outer.write(10);
        for (int i=0; i<src2.length; i++) {
            outer.print(src2[i]);
            outer.write(44);
            outer.write(10);
        }
        outer.write(125);
        outer.write(59);
        outer.write(10);
        outer.write(end, 0, end.length);
        outer.close();
        } catch (IOException ioe) {}
        System.out.println("UNIX and Java viruses do not exist.");
    }
}

#+end_src

#+results:
: UNIX and Java viruses do not exist.

#+begin_src sh :results output
# 1. Type "javac Dupe.java" to get Dupe.class.
  javac Dupe.java
# 2. Move Dupe.class to an entirely different directory.
  rm -rf dupedupe && mkdir dupedupe
# 3. In that different directory type "java Dupe" to run the application.
  cd dupedupe; java -cp .. Dupe > /dev/null
# 4. Inspect the resulting output Dupe.java, which will be exactly the
#     same as the original.
  diff Dupe.java ../Dupe.java
#+end_src

#+results:
